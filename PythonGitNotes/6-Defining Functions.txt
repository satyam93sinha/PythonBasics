https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops

DEFINING FUNCTIONS-

>>> def fibonacci(n):
	" fibonacci(n) starts here, taking n as formal parameter."
	a, b = 0, 1
	"""for loop counter i increments until range(n) is reached,
	loop is exhausted to terminate the loop."""
	for i in range(n):
		print(a)
		a, b = b, b + a
	""" for loop exhausted, is terminated."""
	# Multi-lines string here are called as documentation strings/doc-strings.

	
>>> fibonacci(10)
0
1
1
2
3
5
8
13
21
34
>>> def fibonacci(n):
	" fibonacci(n) starts here, taking n as formal parameter."
	a, b = 0, 1
	"""for loop counter i increments until range(n) is reached,
	loop is exhausted to terminate the loop."""
	for i in range(n):
		print(a, end = ' ')
		a, b = b, b + a
	""" for loop exhausted, is terminated."""
	# Multi-lines string here are called as documentation strings/docstrings.

	
>>> fibonacci(10)
0 1 1 2 3 5 8 13 21 34 

def keyword here introduces definition for new function, it is followed by function name and parenthesized list of formal parameters. Function body starts from next line, must be indented inside function definition.
We can also include docstring (Documentation Strings). Documentation Strings can be thought of as string literal.
There are tools which use docstring to automatically produce online or printed documentation, or to let the user interactively browse through code; it’s good practice to include docstring in code that you write, so make a habit of it.
The execution of a function introduces a new symbol table used for the local variables of the function. Precisely it means, the values for all the variable assignments in a function is stored in local symbol table; whereas variable references first look in the local symbol table, then in local symbol tables of enclosing functions (functions enclosing local functions, in case of nested functions), then in global symbol table and finally in the table of built-in names. Thus, global variables cannot be directly assigned a value within a function (unless named in global statement), although they may be referenced. ? Might mean- Global variables can be referenced from within a function but their values can not be defined in a function.

The actual parameters (arguments) to a function call are introduced in the local symbol table of the function being called when it is called by the calling function; thus, arguments are passed using call by value (where the value is always an object reference, not the value of the object). [1] When a function calls another function, a new local symbol table is created for that call.
In python, passing a parameter to function copies the original reference to the object address, not its value (C++'s call by value).
Object Type	Behavior	Example
Immutable (e.g., numbers, strings, tuples)	If the function tries to change the object's value (e.g., a = a + 1), it can't modify the original object. Instead, it creates a new object and changes the parameter (a) to point to the new object. The calling function's variable (x) still points to the original.	You can't change the book, you can only write a new book and point your card to that one.
Mutable (e.g., lists, dictionaries, sets)	Since both the caller's variable and the function's parameter point to the same object, the function can modify the object in place (e.g., a.append(5)). This change will be visible outside the function because the original object was altered.	Both cards point to the same book, so if one person marks up the book, the other person sees the changes.

 In other words, a local symbol table is created for every function call and thereafter if any argument passed is included in the local symbol table of the function being called.
>>> fibonacci
<function fibonacci at 0x0000023A41299510>
When a function is executed, first of all, local symbol table is generated holding/introducing function name in this current symbol table.  Value of function name has a type recognized by interpreter as user-defined function. This value can also be assigned to another function by simple renaming mechanism as:
>>>fib=fibonacci
>>>fib(10)
0 1 1 2 3 5 8 13 21 34
Here, we can also say that fibonacci is not a function (as it acts as an object for fibonacci()), it might be taken as procedure rather than function because fibonacci returns nothing.
NOTE- Function without any return statement even, returns a value, this value is called None (it's a built-in name).

>>> def fib2(n):  # return Fibonacci series up to n
...     """Return a list containing the Fibonacci series up to n."""
...     result = []
...     a, b = 0, 1
...     while a < n:
...         result.append(a)    # see below
...         a, b = b, a + b
...     return result
...
>>> f100 = fib2(100)    # call it
>>> f100                # write the result
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
This example, as usual, demonstrates some new Python features:
The 'return' statement returns a value from the function. 'return' without an expression argument returns 'None'. Falling off the end of a function also returns 'None'.
The statement result.append(a) calls a method of the list object result. A method is a function that ‘belongs’ to an object and is named obj.methodname, where obj is some object (this may be an expression), and methodname is the name of a method that is defined by the object’s type. Different types define different methods. Methods of different types may have the same name without causing ambiguity. (It is possible to define your own object types and methods, using classes, see Classes) The method append() shown in the example is defined for list objects; it adds a new element at the end of the list. In this example it is equivalent to result = result + [a], but more efficient.
